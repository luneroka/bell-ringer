services:
  postgres:
    container_name: bell-ringer-postgres
    image: postgres:15-alpine
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/main/resources/seed:/docker-entrypoint-initdb.d
    ports:
      - '5332:5432'
    networks:
      - bell-ringer-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    container_name: bell-ringer-backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - '8080:8080'
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DB_HOST=postgres
      - DB_PORT=5432
    networks:
      - bell-ringer-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/']
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s

  frontend:
    container_name: bell-ringer-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - '5173:5173'
    networks:
      - bell-ringer-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped

networks:
  bell-ringer-network:
    driver: bridge

volumes:
  postgres_data:
