# ====================================
# Bell-Ringer API â€” Simplified Test Suite
# ====================================
# How to use:
# 1. Run the "Quick Setup" section first to create test data
# 2. Use the "Core Testing Workflows" for main functionality
# 3. Use "Automatic Scoring Tests" to verify text answer scoring
# 4. Update IDs below as needed based on your responses

@baseUrl = {{baseUrl}}
@firebaseToken = {{FIREBASE_ID_TOKEN}}

# ----------------------
# Test Data IDs (update these based on your responses)
# ----------------------
@userId = b78c8afe-536a-4712-ac04-7cca951e97c5
@categoryId = 10
@quizId = 1
@attemptId = 1
@questionId = 52

########################################################
# QUICK SETUP - Run these first to create test data
########################################################

### 0. Test Firebase token
GET https://httpbin.org/get
Authorization: Bearer {{firebaseToken}}

### 1. Health check
GET {{baseUrl}}/api/v1/users/ping
Authorization: Bearer {{firebaseToken}}

### 2. Authenticate & fetch current user (auto-creates locally) - /me endpoint
GET {{baseUrl}}/me
Accept: application/json
Authorization: Bearer {{firebaseToken}}

> {%
  const data = JSON.parse(response.body);
  client.global.set("userId", data.id);SEL
%}

### 2b. Get current user via unified users endpoint
GET {{baseUrl}}/api/v1/users/me
Accept: application/json
Authorization: Bearer {{firebaseToken}}

### 2c. Update current user profile
PUT {{baseUrl}}/api/v1/users/me
Content-Type: application/json
Authorization: Bearer {{firebaseToken}}

{
  "displayName": "Updated Display Name",
  "photoUrl": "https://example.com/new-photo.jpg"
}

### 2d. Get user by ID (admin operation)
GET {{baseUrl}}/api/v1/users/{{userId}}
Accept: application/json
Authorization: Bearer {{firebaseToken}}

### 3. Generate quiz with questions (creates quiz + first attempt)
POST {{baseUrl}}/api/v1/questions/generate
Content-Type: application/json
Authorization: Bearer {{firebaseToken}}

{
  "userId": "{{userId}}",
  "categoryId": {{categoryId}},
  "total": 10,
  "modeOverride": null
}

########################################################
# CORE TESTING WORKFLOWS
########################################################

### Get quiz details
GET {{baseUrl}}/api/v1/quizzes/{{quizId}}
Accept: application/json
Authorization: Bearer {{firebaseToken}}

### Get latest attempt for quiz
GET {{baseUrl}}/api/v1/attempts/quiz/{{quizId}}/latest
Accept: application/json
Authorization: Bearer {{firebaseToken}}

### Get attempt with detailed answers
GET {{baseUrl}}/api/v1/attempts/{{attemptId}}/detailed
Accept: application/json
Authorization: Bearer {{firebaseToken}}

### Submit multiple choice answers (batch)
POST {{baseUrl}}/api/v1/attempt-choices/batch
Content-Type: application/json
Authorization: Bearer {{firebaseToken}}

{
  "attemptId": {{attemptId}},
  "selectedChoices": [
    {"questionId": 223, "choiceId": 3271},
    {"questionId": 201, "choiceId": 3303}
  ]
}

### Complete attempt
POST {{baseUrl}}/api/v1/attempts/{{attemptId}}/complete
Accept: application/json
Authorization: Bearer {{firebaseToken}}

### Retry quiz (creates new attempt)
POST {{baseUrl}}/api/v1/attempts/retry
Content-Type: application/json
Authorization: Bearer {{firebaseToken}}

{
  "quizId": {{quizId}}
}

### Get user statistics
GET {{baseUrl}}/api/v1/attempts/user/{{userId}}/stats
Accept: application/json
Authorization: Bearer {{firebaseToken}}

########################################################
# AUTOMATIC SCORING TESTS - Text Answer Evaluation
########################################################

### Submit text answer (automatically scored)
POST {{baseUrl}}/api/v1/attempt-text-answers
Content-Type: application/json
Authorization: Bearer {{firebaseToken}}

{
  "attemptId": {{attemptId}},
  "questionId": {{questionId}},
  "answerText": "React hooks allow functional components to use state and lifecycle methods. useState manages state while useEffect handles side effects like data fetching."
}

### Update text answer (automatically re-scored)
PUT {{baseUrl}}/api/v1/attempt-text-answers/{{attemptId}}/{{questionId}}
Content-Type: application/json
Authorization: Bearer {{firebaseToken}}

{
  "answerText": "Key prop"
}

### Get text answer with automatic scoring results
GET {{baseUrl}}/api/v1/attempt-text-answers/{{attemptId}}/{{questionId}}
Accept: application/json
Authorization: Bearer {{firebaseToken}}

### Get all unscored text answers (should be empty with automatic scoring)
GET {{baseUrl}}/api/v1/attempt-text-answers/unscored
Accept: application/json
Authorization: Bearer {{firebaseToken}}

### Manual grade override (admin function)
PUT {{baseUrl}}/api/v1/attempt-text-answers/{{attemptId}}/{{questionId}}/grade
Content-Type: application/json
Authorization: Bearer {{firebaseToken}}

{
  "score": 95,
  "isCorrect": true,
  "feedback": "Excellent answer! Manual override applied."
}

########################################################
# REFERENCE ENDPOINTS - Individual API Testing
########################################################

### List root categories
GET {{baseUrl}}/api/v1/categories/roots
Accept: application/json
Authorization: Bearer {{firebaseToken}}

### Get category details
GET {{baseUrl}}/api/v1/categories/{{categoryId}}
Accept: application/json
Authorization: Bearer {{firebaseToken}}

### Get question by ID (with choices)
GET {{baseUrl}}/api/v1/questions/{{questionId}}
Accept: application/json
Authorization: Bearer {{firebaseToken}}

### Get choices for a question
GET {{baseUrl}}/api/v1/choices/question/{{questionId}}
Accept: application/json
Authorization: Bearer {{firebaseToken}}

### Get open answers for a question
GET {{baseUrl}}/api/v1/open-answers/question/{{questionId}}
Accept: application/json
Authorization: Bearer {{firebaseToken}}

### Get all attempts for a user
GET {{baseUrl}}/api/v1/attempts/user/{{userId}}
Accept: application/json
Authorization: Bearer {{firebaseToken}}

########################################################
# AUTOMATED TESTING SCRIPT INTEGRATION
########################################################

### Run the automated test script from terminal:
### cd /Users/yoann/dev/bell-ringer
### ./test-automatic-scoring.sh
###
### The script will:
### 1. Check application connectivity
### 2. Create test user
### 3. Generate quiz with questions
### 4. Submit text answers with automatic scoring
### 5. Test answer updates with re-scoring
### 6. Verify automatic scoring functionality
###
### Note: You must paste a valid Firebase ID token into the @firebaseToken variable at the top of this file to run authenticated requests.
### Expected output: Automatic scoring working confirmation