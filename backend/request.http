# ==================================
# Bell-Ringer API — HTTP Test Suite
# ==================================
# How to use:
# - Open this file in IntelliJ IDEA and click the ▶ icons.
# - Fill the variables below with real IDs as you create data.
# - Run top → bottom to create, then query.

@baseUrl = http://localhost:8080

# ----------------------
# IDs you will populate
# ----------------------
@userId = 805da6de-f660-4d9e-88c8-d3389e12a1f2
@rootCategoryId = 1
@childCategoryId = 2
@quizId = 1

########################################################
# USERS
########################################################

### Health check
GET {{baseUrl}}/api/v1/users/ping

### Get all users
GET {{baseUrl}}/api/v1/users
Accept: application/json

### Get user by ID
GET {{baseUrl}}/api/v1/users/{{userId}}
Accept: application/json

### Create a user (minimal — if your controller auto-generates UUID)
POST {{baseUrl}}/api/v1/users
Content-Type: application/json

{
  "email": "test@bellringer.com"
}

### Create a user (full — if your controller expects auth provider info)
# NOTE: Use this variant if your UserController requires provider + uid
POST {{baseUrl}}/api/v1/users
Content-Type: application/json

{
  "authProvider": "firebase",
  "authUid": "dev-uid-001",
  "email": "test+firebase@bellringer.com",
  "emailVerified": false,
  "displayName": "Dev Tester",
  "photoUrl": "https://example.com/avatar.png"
}

### Update user (useful to verify updates with a known UUID)
PUT {{baseUrl}}/api/v1/users/{{userId}}
Content-Type: application/json

{
  "email": "new@bellringer.com",
  "emailVerified": true,
  "displayName": "Bob",
  "photoUrl": "https://example.com/new-avatar.png"
}

### Delete user
DELETE {{baseUrl}}/api/v1/users/{{userId}}

########################################################
# CATEGORIES
########################################################

# Commented out until prod
### Create a root category (e.g., Frontend)
#POST {{baseUrl}}/api/v1/categories
#Content-Type: application/json
#
#{
#  "area": "frontend",
#  "name": "Frontend",
#  "parentId": null
#}

### Create a child category (e.g., React under Frontend)
#POST {{baseUrl}}/api/v1/categories
#Content-Type: application/json
#
#{
#  "area": "frontend",
#  "name": "React",
#  "parentId": {{rootCategoryId}}
#}

### List root categories
GET {{baseUrl}}/api/v1/categories/roots
Accept: application/json

### Get category by id (root)
GET {{baseUrl}}/api/v1/categories/{{rootCategoryId}}
Accept: application/json

### List children of a category
GET {{baseUrl}}/api/v1/categories/{{rootCategoryId}}/children
Accept: application/json

### Resolve selection ids (parent → [parent + children])
GET {{baseUrl}}/api/v1/categories/{{rootCategoryId}}/ids
Accept: application/json

########################################################
# QUIZZES
########################################################

### Get quiz by id - Returns QuizDto
GET {{baseUrl}}/api/v1/quizzes/{{quizId}}
Accept: application/json

### Mark quiz completed - Returns QuizDto
POST {{baseUrl}}/api/v1/quizzes/{{quizId}}/complete
Accept: application/json

### Clear completion flag
DELETE {{baseUrl}}/api/v1/quizzes/{{quizId}}/complete

### Completed quizzes count (user + category)
GET {{baseUrl}}/api/v1/quizzes/history/count?userId={{userId}}&categoryId={{childCategoryId}}
Accept: application/json

# TODO : TEST AFTER IMPLEMENTING ATTEMPT AND ATTEMPT_ANSWER
### Accuracy per difficulty (user + category)
GET {{baseUrl}}/api/v1/quizzes/accuracy?userId={{userId}}&categoryId={{childCategoryId}}
Accept: application/json

########################################################
# QUIZ_QUESTIONS (join table)
########################################################
/
### List only question IDs linked to a quiz
GET {{baseUrl}}/api/v1/quizzes/{{quizId}}/questions/ids
Accept: application/json

### Count how many questions are attached to a quiz
GET {{baseUrl}}/api/v1/quizzes/{{quizId}}/questions/count
Accept: application/json

### Add a single question to a quiz
POST {{baseUrl}}/api/v1/quizzes/{{quizId}}/questions/11

### Add many questions to a quiz (provide existing question IDs)
POST {{baseUrl}}/api/v1/quizzes/{{quizId}}/questions
Content-Type: application/json

{
  "questionIds": [1, 2, 4]
}

### Replace all links with an ordered list
PUT {{baseUrl}}/api/v1/quizzes/{{quizId}}/questions
Content-Type: application/json

{
  "questionIds": [5, 6, 7, 8]
}

### Remove a single question from a quiz
DELETE {{baseUrl}}/api/v1/quizzes/{{quizId}}/questions/3

### Clear all questions from a quiz
DELETE {{baseUrl}}/api/v1/quizzes/{{quizId}}/questions

########################################################
# QUESTION GENERATION (service-level)
########################################################

# ----------------------
# IDs you will populate
# ----------------------
@questionId = 1

### Get a single question by ID (with choices)
GET {{baseUrl}}/api/v1/questions/{{questionId}}
Accept: application/json

### Compute quota only (RANDOM/ADAPTIVE decided in service)
POST {{baseUrl}}/api/v1/questions/quota
Content-Type: application/json

{
  "userId": "{{userId}}",
  "categoryId": {{childCategoryId}},
  "total": 15,
  "modeOverride": null
}

### Generate questions (requires stock in DB) - Returns QuestionDto[]
POST {{baseUrl}}/api/v1/questions/generate
Content-Type: application/json

{
  "userId": "{{userId}}",
  "categoryId": {{childCategoryId}},
  "total": 15,
  "modeOverride": null
}

########################################################
# CHOICES
########################################################

# ----------------------
# IDs you will populate
# ----------------------
@questionId = 11
@choiceId = 1

### Get a single choice by ID
GET {{baseUrl}}/api/v1/choices/{{choiceId}}
Accept: application/json

### Get choices for a given question
GET {{baseUrl}}/api/v1/choices/question/{{questionId}}
Accept: application/json

### Check if a choice is correct by ID
GET {{baseUrl}}/api/v1/choices/{{choiceId}}/is-correct
Accept: application/json

### Get correct choices for a question
GET {{baseUrl}}/api/v1/choices/question/{{questionId}}/correct
Accept: application/json

### Get correct choice IDs for a question
GET {{baseUrl}}/api/v1/choices/question/{{questionId}}/correct-ids
Accept: application/json